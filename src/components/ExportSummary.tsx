'use client';

import React from 'react';

interface OptimalPrice {
  price: number;
  conversionRate: number;
  revenue: number;
  profit: number;
  metric: string;
  value: number;
}

interface ComparisonPoint {
  price: number;
  conversionRate: number;
  revenue: number;
  profit: number;
}

interface ExportSummaryProps {
  mu: number;
  sigma: number;
  cost: number;
  traffic: number;
  minPrice: number;
  maxPrice: number;
  oec: string;
  optimalPrice: OptimalPrice;
  priceA: ComparisonPoint;
  priceB: ComparisonPoint;
}

export default function ExportSummary({
  mu, sigma, cost, traffic, minPrice, maxPrice, oec, optimalPrice, priceA, priceB
}: ExportSummaryProps) {
  
  const generateReport = () => {
    const oecLabel = oec === 'revenue' ? 'Revenue' : oec === 'profit' ? 'Profit' : 'Conversion Rate';
    
    return `## ðŸ§ª Price Test Simulation Report

### Input Parameters:
- Î¼ (Average WTP): ${mu}
- Ïƒ (Std Deviation): ${sigma}
- Cost per unit: $${cost}
- Traffic: ${traffic.toLocaleString()}
- Price Range: $${minPrice} ~ $${maxPrice}
- OEC: Maximize ${oecLabel}

### âœ… Optimal Price: $${optimalPrice.price}
- Conversion Rate: ${optimalPrice.conversionRate.toFixed(2)}%
- Revenue: $${optimalPrice.revenue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
- Profit: $${optimalPrice.profit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}

### ðŸ“Š A/B Comparison:
| Metric         | Price A ($${priceA.price}) | Price B ($${priceB.price}) |
|----------------|${'-'.repeat(15)}|${'-'.repeat(15)}|
| Conversion (%) | ${priceA.conversionRate.toFixed(2)}%         | ${priceB.conversionRate.toFixed(2)}%          |
| Revenue        | $${priceA.revenue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}       | $${priceB.revenue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}       |
| Profit         | $${priceA.profit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}        | $${priceB.profit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}        |

---
Generated by Price Test Easy Tool
Date: ${new Date().toLocaleString()}`;
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generateReport());
      alert('Report copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
      alert('Failed to copy to clipboard. Please try again.');
    }
  };

  const downloadAsFile = () => {
    const report = generateReport();
    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `price-test-report-${new Date().toISOString().split('T')[0]}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-gradient-to-r from-indigo-50 to-purple-50 p-6 rounded-lg border border-indigo-200">
      <h3 className="text-xl font-bold mb-4 text-center text-indigo-800">
        ðŸ“„ Export Simulation Summary
      </h3>
      
      <div className="bg-white p-4 rounded border mb-4 text-sm">
        <h4 className="font-semibold mb-2">Simulation Settings & Results:</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-gray-700">
          <div>
            <strong>Input Parameters:</strong>
            <ul className="mt-1 space-y-1">
              <li>â€¢ Î¼: {mu}, Ïƒ: {sigma}</li>
              <li>â€¢ Cost: ${cost}</li>
              <li>â€¢ Traffic: {traffic.toLocaleString()}</li>
              <li>â€¢ Price Range: ${minPrice} ~ ${maxPrice}</li>
              <li>â€¢ OEC: Maximize {oec === 'revenue' ? 'Revenue' : oec === 'profit' ? 'Profit' : 'Conversion Rate'}</li>
            </ul>
          </div>
          <div>
            <strong>Optimal Price: ${optimalPrice.price}</strong>
            <ul className="mt-1 space-y-1">
              <li>â€¢ Conversion Rate: {optimalPrice.conversionRate.toFixed(2)}%</li>
              <li>â€¢ Revenue: ${optimalPrice.revenue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</li>
              <li>â€¢ Profit: ${optimalPrice.profit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</li>
            </ul>
          </div>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-3 justify-center">
        <button
          onClick={copyToClipboard}
          className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
        >
          ðŸ“‹ Copy to Clipboard
        </button>
        <button
          onClick={downloadAsFile}
          className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium"
        >
          ðŸ’¾ Download as .md
        </button>
      </div>
      
      <p className="text-center text-sm text-gray-600 mt-3">
        Save this simulation as a record for knowledge accumulation and future analysis
      </p>
    </div>
  );
}